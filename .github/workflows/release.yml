name: Release

on:
  # 只有一个按钮，不带任何输入
  workflow_dispatch:

  # 合并 PR 后（用于 Release PR 合并时触发发布）
  pull_request:
    types: [closed]
    branches: [master]   # 主分支是 main 的话改成 main

concurrency:
  group: release
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

env:
  IMAGE_NAME: garenmtech1981/wms   # 改成你的 <DockerHub用户名>/<仓库名>

jobs:
  # ① 手动运行：自动计算 bump + 生成 Release PR
  create_release_pr:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master (with history & tags)
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - name: Find latest tag
        id: lasttag
        shell: bash
        run: |
          TAG=$(git tag --list 'v*' --sort=-version:refname | head -n 1 || true)
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "Latest tag: ${TAG:-<none>}"

      - name: Guard - changes since latest tag
        id: guard
        shell: bash
        run: |
          TAG='${{ steps.lasttag.outputs.tag }}'
          if [ -z "$TAG" ]; then
            echo "No tag yet -> allow first release."
            echo "should_release=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          COMMITS=$(git rev-list "$TAG..HEAD" --count || echo 0)
          echo "Commits since $TAG: $COMMITS"
          if [ "$COMMITS" -eq 0 ]; then
            echo "No commits since $TAG -> skip."
            echo "should_release=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # 过滤仅改版本/工作流
          CHANGED=$(git diff --name-only "$TAG..HEAD" | \
            grep -Ev '^(package\.json|package-lock\.json|\.github/workflows/release\.yml)$' || true)
          echo "Changed files (filtered):"
          echo "$CHANGED"
          if [ -z "$CHANGED" ]; then
            echo "Only version/workflow changed -> skip."
            echo "should_release=false" >> "$GITHUB_OUTPUT"
          else
            echo "should_release=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Stop if no changes
        if: ${{ steps.guard.outputs.should_release != 'true' }}
        run: |
          echo "Skip: no meaningful changes since last tag."

      - name: Check for existing open release PR
        if: ${{ steps.guard.outputs.should_release == 'true' }}
        id: open_release_pr
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const prs = await github.paginate(github.rest.pulls.list, {
              owner, repo, state: 'open', per_page: 100
            });
            const match = prs.find(pr =>
              pr.base?.ref === 'master' && pr.head?.ref?.startsWith('release/')
            );
            core.setOutput('pr_number', match ? String(match.number) : '');

      - name: Guard - skip if a release PR already exists
        if: ${{ steps.guard.outputs.should_release == 'true' && steps.open_release_pr.outputs.pr_number != '' }}
        run: |
          echo "Skip: existing release PR #${{ steps.open_release_pr.outputs.pr_number }}."

      # === 自动计算 bump（稳健版）：用 PR 列表按 merged_at 过滤；排除 Release PR；输出调试明细 ===
      - name: Auto-detect bump from merged PR labels (robust)
        if: ${{ steps.guard.outputs.should_release == 'true' && steps.open_release_pr.outputs.pr_number == '' }}
        id: suggest
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const cp = require('node:child_process');

            // 上一个 tag 的 tagger 时间（真实打 tag 时间）；失败再退回到被标记 commit 的时间
            const tag = '${{ steps.lasttag.outputs.tag }}';
            let since = null;
            if (tag) {
              try {
                since = cp.execSync(`git for-each-ref --format='%(taggerdate:iso8601)' refs/tags/${tag}`, {stdio:['ignore','pipe','pipe']}).toString().trim();
              } catch (_) {}
              if (!since) {
                try {
                  since = cp.execSync(`git log -1 --format=%cI ${tag}`, {stdio:['ignore','pipe','pipe']}).toString().trim();
                } catch (_) {}
              }
            }
            const sinceDate = since ? new Date(since) : null;

            // 直接列 PR（state=closed, base=master），用 merged_at 过滤
            const perPage = 100;
            let page = 1;
            const candidates = [];
            while (true) {
              const { data } = await github.rest.pulls.list({
                owner, repo,
                state: 'closed',
                base: 'master',
                sort: 'updated',
                direction: 'desc',
                per_page: perPage,
                page
              });
              if (!data.length) break;
              for (const pr of data) {
                if (!pr.merged_at) continue;
                if (sinceDate && new Date(pr.merged_at) < sinceDate) continue;
                candidates.push(pr);
              }
              if (data.length < perPage) break;
              if (page >= 10) break; // 防御上限
              page++;
            }

            // 计算 bump，排除 Release PR
            const rows = [];
            let rank = 0; // 0:none, 1:patch, 2:minor, 3:major
            for (const pr of candidates) {
              const headRef = pr.head?.ref || '';
              const labels = (pr.labels || []).map(l => l.name || String(l));
              const lower = labels.map(s => String(s || '').toLowerCase().trim());

              const isReleasePR = lower.includes('release') || headRef.startsWith('release/');
              rows.push({
                number: pr.number,
                title: pr.title,
                merged_at: pr.merged_at,
                labels: labels.join(', '),
                note: isReleasePR ? 'skipped (release PR)' : 'used'
              });
              if (isReleasePR) continue;

              if (lower.includes('major')) { rank = Math.max(rank, 3); if (rank === 3) break; }
              else if (lower.includes('minor')) { rank = Math.max(rank, 2); }
              else if (lower.includes('patch')) { rank = Math.max(rank, 1); }
            }

            const bumpMap = {0:'patch', 1:'patch', 2:'minor', 3:'major'};
            const recommended = bumpMap[rank] || 'patch';

            core.info(`Since tag ${tag || '<none>'}; considered ${candidates.length} merged PRs.`);
            for (const r of rows) {
              core.info(`#${r.number} | ${r.title} | labels: [${r.labels}] | merged_at: ${r.merged_at} | ${r.note}`);
            }
            core.info(`=> Auto bump: ${recommended}`);

            await core.summary
              .addHeading('Auto-detected bump (robust)')
              .addRaw(`Since tag: **${tag || '<none>'}**  | Base: **master**  | Result: **${recommended.toUpperCase()}**\n\n`)
              .addTable([
                [{data: 'PR', header: true}, {data: 'Title', header: true}, {data: 'Labels', header: true}, {data: 'Merged at', header: true}, {data: 'Note', header: true}],
                ...rows.map(r => [`#${r.number}`, r.title, r.labels || '(none)', r.merged_at, r.note])
              ])
              .write();

            core.setOutput('recommended', recommended);

      - name: Setup Node
        if: ${{ steps.guard.outputs.should_release == 'true' && steps.open_release_pr.outputs.pr_number == '' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        if: ${{ steps.guard.outputs.should_release == 'true' && steps.open_release_pr.outputs.pr_number == '' }}
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm i; fi

      - name: Bump version (auto)
        if: ${{ steps.guard.outputs.should_release == 'true' && steps.open_release_pr.outputs.pr_number == '' }}
        id: bump
        shell: bash
        run: |
          BUMP='${{ steps.suggest.outputs.recommended }}'
          echo "Auto bump: $BUMP"
          npm version "$BUMP" --no-git-tag-version
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "New version: $VERSION"

      - name: Create Release PR
        if: ${{ steps.guard.outputs.should_release == 'true' && steps.open_release_pr.outputs.pr_number == '' }}
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(release): bump version to v${{ env.VERSION }}"
          branch: release/bump-v${{ env.VERSION }}
          title: "Release: v${{ env.VERSION }}"
          body: |
            Auto-created by GitHub Actions.
            - Auto-detected bump: `${{ steps.suggest.outputs.recommended }}`
            - New version: `v${{ env.VERSION }}`
          base: master
          labels: release

  # ② 只在 Release PR 合并后：构建/推镜像 + 打 tag + GitHub Release
  build_and_push_on_merge:
    if: >
      github.event_name == 'pull_request' &&
      github.event.action == 'closed' &&
      github.event.pull_request.merged == true &&
      (
        startsWith(github.event.pull_request.head.ref, 'release/') ||
        contains(join(github.event.pull_request.labels.*.name, ' '), 'release')
      )
    runs-on: ubuntu-latest
    steps:
      - name: Checkout merged code (with history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Read version
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Read version: $VERSION"

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build image
        shell: bash
        run: |
          docker build -t "${{ env.IMAGE_NAME }}:${{ env.VERSION }}" \
                       -t "${{ env.IMAGE_NAME }}:latest" .

      - name: Push image
        shell: bash
        run: |
          docker push "${{ env.IMAGE_NAME }}:${{ env.VERSION }}"
          docker push "${{ env.IMAGE_NAME }}:latest"

      - name: Tag repo with version
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          TAG="v${{ env.VERSION }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists. Skip."
          else
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: v${{ env.VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ③ PR 关闭未合并：避免红色失败
  skip_when_closed_without_merge:
    if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == false }}
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "PR closed without merge. Skipping release."

name: Release

on:
  workflow_dispatch:
    inputs:
      bump:
        description: "Version bump type"
        required: true
        default: patch
        type: choice
        options: [major, minor, patch]

  pull_request:
    types: [closed]
    branches: [master]   # 如果主分支是 main 的话改成 main

# 防止多次并发手滑触发
concurrency:
  group: release
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

env:
  IMAGE_NAME: garenmtech1981/wms   # 改成你的 <DockerHub用户名>/<仓库名>

jobs:
  # ① 手动触发：守卫检查 + 生成 Release PR
  create_release_pr:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master (with tags)
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0                      # 需要拿到历史和 tags

      - name: Find latest tag
        id: lasttag
        shell: bash
        run: |
          TAG=$(git tag --list 'v*' --sort=-version:refname | head -n 1 || true)
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "Latest tag: ${TAG:-<none>}"

      - name: Guard - check changes since latest tag
        id: guard
        shell: bash
        run: |
          if [ -z "${{ steps.lasttag.outputs.tag }}" ]; then
            echo "No tag yet -> allow release."
            echo "should_release=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # 计算从最新 tag 到 HEAD 的差异；排除仅改版本/工作流的场景
          CHANGED=$(git diff --name-only "${{ steps.lasttag.outputs.tag }}..HEAD" | \
            grep -Ev '^(package\.json|package-lock\.json|\.github/workflows/release\.yml)$' || true)

          echo "Changed files:"
          echo "$CHANGED"

          if [ -z "$CHANGED" ]; then
            echo "No meaningful changes since ${{ steps.lasttag.outputs.tag }} -> skip."
            echo "should_release=false" >> "$GITHUB_OUTPUT"
          else
            echo "should_release=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Stop if no changes
        if: ${{ steps.guard.outputs.should_release != 'true' }}
        shell: bash
        run: |
          echo "Skip creating Release PR: no code changes since last tag."
          # 让 Job 成功结束（绿色 skipped），后续步骤不再执行
          exit 0

      - name: Check for existing release PR
        id: check_pr
        uses: jwalton/gh-find-current-pr@v1
        with:
          head: '*release/*'
          base: 'master'
          state: 'open'
          sort: 'created'
          per_page: 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Guard - skip if release PR exists
        if: ${{ steps.check_pr.outputs.pr_number != '' }}
        shell: bash
        run: |
          echo "Skip creating Release PR: existing release PR ${{ steps.check_pr.outputs.pr_number }} found."
          exit 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        shell: bash
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm i; fi

      - name: Bump version
        id: bump
        shell: bash
        run: |
          npm version "${{ github.event.inputs.bump }}" --no-git-tag-version
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "New version: $VERSION"

      - name: Create Release PR
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(release): bump version to v${{ env.VERSION }}"
          branch: release/bump-v${{ env.VERSION }}
          title: "Release: v${{ env.VERSION }}"
          body: |
            This PR was created automatically by GitHub Actions.
            - Bump type: `${{ github.event.inputs.bump }}`
            - New version: `v${{ env.VERSION }}`
          base: master
          labels: release

  # ② Release PR 合并后：构建并推送 Docker 镜像
  build_and_push_on_merge:
    if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout merged code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Read version
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Read version: $VERSION"

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build image
        shell: bash
        run: |
          docker build -t "${{ env.IMAGE_NAME }}:${{ env.VERSION }}" \
                       -t "${{ env.IMAGE_NAME }}:latest" .

      - name: Push image
        shell: bash
        run: |
          docker push "${{ env.IMAGE_NAME }}:${{ env.VERSION }}"
          docker push "${{ env.IMAGE_NAME }}:latest"

  # ③ 可选：PR 被关闭但未合并时，只输出一句话避免红色
  skip_when_closed_without_merge:
    if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == false }}
    runs-on: ubuntu-latest
    steps:
      - run: echo "PR closed without merge. Skipping release."

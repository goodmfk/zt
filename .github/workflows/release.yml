name: Release

on:
  # 只在 PR 合并到 master 时触发
  pull_request:
    types: [closed]
    branches: [master]

# 防止并发触发
concurrency:
  group: release
  cancel-in-progress: true

permissions:
  contents: write        # 需要写权限推回 master、打 tag
  pull-requests: read

env:
  IMAGE_NAME: garenmtech1981/wms    # 改成你的 <DockerHub用户名>/<仓库名>

jobs:
  release_on_merge:
    if: ${{ github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout master (with tags)
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0                # 需要拿到历史和 tags

      # 读取合并 PR 的 label，自动判定 bump 类型
      - name: Detect bump from PR labels
        id: bump
        shell: bash
        run: |
          # 读入当前事件中的 PR labels
          labels=$(jq -r '.pull_request.labels[].name' "$GITHUB_EVENT_PATH" | tr '\n' ' ' | tr '[:upper:]' '[:lower:]')
          echo "PR labels: $labels"

          BUMP="patch"
          if echo "$labels" | grep -q 'major'; then BUMP="major"; fi
          if echo "$labels" | grep -q 'minor'; then BUMP="minor"; fi
          echo "bump=$BUMP" >> "$GITHUB_OUTPUT"
          echo "Using bump type: $BUMP"

      # 找最新 tag（vX.Y.Z），用于做守卫
      - name: Find latest tag
        id: lasttag
        shell: bash
        run: |
          TAG=$(git tag --list 'v*' --sort=-version:refname | head -n 1 || true)
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "Latest tag: ${TAG:-<none>}"

      # 从最新 tag 到 HEAD 的实际改动（排除仅改版本/工作流的场景）
      - name: Guard - check changes since latest tag
        id: guard
        shell: bash
        run: |
          if [ -z "${{ steps.lasttag.outputs.tag }}" ]; then
            echo "No tag yet -> allow release."
            echo "should_release=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          CHANGED=$(git diff --name-only "${{ steps.lasttag.outputs.tag }}..HEAD" | \
            grep -Ev '^(package\.json|package-lock\.json|\.github/workflows/release\.yml)$' || true)

          echo "Changed files since last tag (filtered):"
          echo "$CHANGED"

          if [ -z "$CHANGED" ]; then
            echo "No meaningful changes since ${{ steps.lasttag.outputs.tag }} -> skip."
            echo "should_release=false" >> "$GITHUB_OUTPUT"
          else
            echo "should_release=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Stop if no changes
        if: ${{ steps.guard.outputs.should_release != 'true' }}
        run: echo "Skip release: no code changes since last tag."

      - name: Setup Node
        if: ${{ steps.guard.outputs.should_release == 'true' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        if: ${{ steps.guard.outputs.should_release == 'true' }}
        shell: bash
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm i; fi

      # 自动 bump 版本并推回 master
      - name: Bump version and push
        if: ${{ steps.guard.outputs.should_release == 'true' }}
        id: ver
        shell: bash
        run: |
          npm version "${{ steps.bump.outputs.bump }}" --no-git-tag-version
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "New version: $VERSION"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json package-lock.json || true
          git commit -m "chore(release): v$VERSION" || echo "No changes to commit"
          git push origin HEAD:master

      # 打 tag 并 push
      - name: Create git tag
        if: ${{ steps.guard.outputs.should_release == 'true' }}
        shell: bash
        run: |
          if [ -z "${{ env.VERSION }}" ]; then
            echo "VERSION is empty!"; exit 1;
          fi
          git tag -a "v${{ env.VERSION }}" -m "Release v${{ env.VERSION }}"
          git push origin "v${{ env.VERSION }}"

      # Docker 登录
      - name: Docker login
        if: ${{ steps.guard.outputs.should_release == 'true' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 构建镜像
      - name: Build image
        if: ${{ steps.guard.outputs.should_release == 'true' }}
        shell: bash
        run: |
          docker build -t "${{ env.IMAGE_NAME }}:${{ env.VERSION }}" \
                       -t "${{ env.IMAGE_NAME }}:latest" .

      # 推送镜像
      - name: Push image
        if: ${{ steps.guard.outputs.should_release == 'true' }}
        shell: bash
        run: |
          docker push "${{ env.IMAGE_NAME }}:${{ env.VERSION }}"
          docker push "${{ env.IMAGE_NAME }}:latest"

name: Release

on:
  # 手动触发（可选），可以在面板里选择 bump 类型
  workflow_dispatch:
    inputs:
      bump:
        description: 'Bump type'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - patch
          - minor
          - major

  # 当 PR 被合并（closed 且 merged=true）时触发
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write         # 需要写权限：push 代码、推 tag、发 release
  pull-requests: read

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  create_release_pr:
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout base branch (main)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }}
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # 读取 PR 标签，决定 bump 类型；如果没有标签则默认 patch
      - name: Decide bump type (from PR label or manual input)
        id: decide
        uses: actions/github-script@v7
        with:
          script: |
            // 手动输入优先生效（仅 workflow_dispatch 有）
            let bump = core.getInput('bump');
            if (!bump) {
              const labels = (context.payload.pull_request?.labels || []).map(l => (l.name || '').toLowerCase());
              if (labels.includes('major')) bump = 'major';
              else if (labels.includes('minor')) bump = 'minor';
              else bump = 'patch';
            }
            core.setOutput('bump', bump);

      - name: Configure git user
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version in package.json
        run: npm version ${{ steps.decide.outputs.bump }} --no-git-tag-version
        shell: bash

      - name: Commit & push version bump
        run: |
          git add package.json package-lock.json 2>/dev/null || true
          git commit -m "chore: bump version (${{ steps.decide.outputs.bump }}) [skip ci]" || echo "No changes to commit"
          git push

      - name: Read version from package.json
        id: readver
        run: |
          echo "VERSION=$(node -p \"require('./package.json').version\")" >> $GITHUB_ENV
          echo "version=$(node -p \"require('./package.json').version\")" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create and push tag
        run: |
          git tag "v${VERSION}"
          git push origin "v${VERSION}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.readver.outputs.version }}
          name: v${{ steps.readver.outputs.version }}
          draft: false
          prerelease: false

  # 手动触发时也走同样流程（和上面几乎一致）
  build_and_push_on_merge:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Decide bump type (manual input or default patch)
        id: decide
        uses: actions/github-script@v7
        with:
          script: |
            let bump = core.getInput('bump');
            if (!bump) bump = 'patch';
            core.setOutput('bump', bump);

      - name: Configure git user
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version in package.json
        run: npm version ${{ steps.decide.outputs.bump }} --no-git-tag-version
        shell: bash

      - name: Commit & push version bump
        run: |
          git add package.json package-lock.json 2>/dev/null || true
          git commit -m "chore: bump version (${{ steps.decide.outputs.bump }}) [skip ci]" || echo "No changes to commit"
          git push

      - name: Read version from package.json
        id: readver
        run: |
          echo "VERSION=$(node -p \"require('./package.json').version\")" >> $GITHUB_ENV
          echo "version=$(node -p \"require('./package.json').version\")" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create and push tag
        run: |
          git tag "v${VERSION}"
          git push origin "v${VERSION}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.readver.outputs.version }}
          name: v${{ steps.readver.outputs.version }}
          draft: false
          prerelease: false
